"-------------------------------------------------------------------------------
" My .vimrc file
"
" inspired by https://github.com/skwp/dotfiles
"
" author: Andrey Morskov < accessd >
"-------------------------------------------------------------------------------

"===============================================================================
" Vundle Manager configuration
"===============================================================================
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"===============================================================================
" Enabled plugins
"==============================================================================

" Colorscheme
Plugin 'altercation/vim-colors-solarized'
Plugin 'bling/vim-airline'

" BufExplorer
Plugin 'jlanzarotta/bufexplorer'

" Ruby Enhancements
Plugin 'vim-ruby/vim-ruby'

" Rails Enhancements
Plugin 'tpope/vim-rails'

" RSpec
Plugin 'Keithbsmiley/rspec.vim' " Syntax highlighting
Plugin 'janko-m/vim-test'

" PHP
Plugin '2072/PHP-Indenting-for-VIm'
Plugin 'StanAngeloff/php.vim'

" Elixir
" Plugin 'elixir-lang/vim-elixir'

" Slim && CoffeeScript
Plugin 'slim-template/vim-slim'
Plugin 'kchmck/vim-coffee-script'

Plugin 'pearofducks/ansible-vim'

" Interact with tmux
Plugin 'dkrieger/vimux'

" Markdown Enhancements
Plugin 'plasticboy/vim-markdown'

" Track UltiSnips (the engine)
let g:loaded_python3_provider = 0
Plugin 'SirVer/ultisnips'
let g:loaded_python3_provider = 1

" Snippets are separated from the engine
Plugin 'honza/vim-snippets'

" Seamless navigation between tmux panes and vim splits
Plugin 'christoomey/vim-tmux-navigator'

" NerdTree
Plugin 'jistr/vim-nerdtree-tabs.git'
Plugin 'scrooloose/nerdtree.git'

" Moving and searching
Plugin 'Lokaltog/vim-easymotion'
Plugin 'rking/ag.vim'
Plugin 'vim-scripts/IndexedSearch'
" Plugin 'nelstrom/vim-visual-star-search'
" Plugin 'skwp/greplace.vim'

" Comments
Plugin 'tomtom/tcomment_vim.git'

" Autocomplete
" Plugin 'Valloric/YouCompleteMe'
" Plugin 'ajh17/VimCompletesMe'
" Plugin 'Shougo/neocomplete.vim'

if has('nvim')
  Plugin 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plugin 'Shougo/deoplete.nvim'
  Plugin 'roxma/nvim-yarp'
  Plugin 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1

" GIT
Plugin 'tpope/vim-fugitive'

Plugin 'tpope/vim-surround'
Plugin 'Raimondi/delimitMate'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tpope/vim-repeat'
Plugin 'terryma/vim-expand-region'
Plugin 'Valloric/MatchTagAlways'

" Plugin 'scrooloose/syntastic'

Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'

Plugin 'bkad/CamelCaseMotion'

Plugin 'majutsushi/tagbar'

Plugin 'pechorin/any-jump.vim'

Plugin 'kylef/apiblueprint.vim'

" Plugin 'edkolev/tmuxline.vim'

" Finish requiring Vundle plugins
call vundle#end()

" Enable filetype detection and filetype-specific indenting & plugins.
filetype plugin indent on

" Enable syntax highlighting
syntax on

"===============================================================================
" General editing configurations
"===============================================================================

" Set map leader
let mapleader = ','
let g:mapleader = ','

set pyxversion=3
let $PYTHONHOME=$HOME."/.pyenv/versions/3.8.5"
set pythonthreedll=$HOME/.pyenv/versions/3.8.5/lib/libpython3.8.a
set number
set history=700
set mousehide
set nowrap
set textwidth=500
set tabstop=2             " tab size
set backspace=2           " make backspace work
set list                  " show hidden chars
set listchars=trail:.     " hidden caracthers and how to show them
set shiftwidth=2          " number of spaces to insert when autoindenting
set sta
set softtabstop=0         " disable softtabstop feature
set sr
set expandtab
set autowriteall
set showmode
set ruler                 " show column numbers
set nostartofline         " keep column when scrolling with <C-f>, <C-b>
set noautoindent          " indent from last line when starting new line
set incsearch             " find the next match as we type the search"
set hlsearch              " hilight searches by default
set ignorecase				    "	ignore case when searching...
set smartcase					    "	...unless we type a capital
set noignorecase
set wildmode=list:longest " bash-like completion
set encoding=utf-8
set exrc                  " enable per-directory .vimrc files
set secure                " disable unsafe commands in local .vimrc files
set mousemodel=popup
set laststatus=2
set clipboard=unnamed
set timeoutlen=200 ttimeoutlen=1
set colorcolumn=100
set listchars=tab:\ \ ,eol:\ "

set nocursorcolumn       " do not highlight column
set nocursorline         " do not highlight line
syntax sync minlines=256 " start highlighting from 256 lines backwards
set synmaxcol=300        " do not highlith very long lines
set re=1                 " use explicit old regexpengine, seems to be more faster"

set rtp+=/usr/local/opt/fzf

" ruby path if you are using rbenv
let g:ruby_path = system('echo $HOME/.rbenv/shims')

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

"-------------------------------------------------------------------------------
" Syntax
"-------------------------------------------------------------------------------
autocmd BufNewFile,BufRead *.ini silent! set syntax=cfg
autocmd BufNewFile,BufRead *.coffee silent! set syntax=coffee

" by default, the indent is 2 spaces but ...
" for php 4 spaces
autocmd Filetype php setlocal ts=4 sw=4 expandtab
" for js/coffee/jade files, 4 spaces
autocmd Filetype javascript setlocal ts=4 sw=4 sts=0 expandtab
autocmd Filetype coffeescript setlocal ts=4 sw=4 sts=0 expandtab
autocmd Filetype jade setlocal ts=4 sw=4 sts=0 expandtab
autocmd Filetype ruby setlocal ts=2 sw=2 expandtab

set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_quiet_messages = {'level': 'warnings'}

call camelcasemotion#CreateMotionMappings('<leader>')
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge
"-------------------------------------------------------------------------------
" no backup
"-------------------------------------------------------------------------------
set nobackup
set nowb
set noswapfile

" do not replace buffer on paste
vnoremap p "_dP"

"-------------------------------------------------------------------------------
" bufexplorer
"-------------------------------------------------------------------------------
map ,e :BufExplorer<CR>
map ,s :BufExplorerHorizontalSplit<CR>
map ,v :BufExplorerVerticalSplit<CR>

"-------------------------------------------------------------------------------
" misc maps
"-------------------------------------------------------------------------------

map E <Plug>(expand_region_expand)
map Y <Plug>(expand_region_shrink)
nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>
map ,r :e %<CR>                   " reload file
map Q :bd<CR>                     " close buffer
map ,s :w<CR>										  " save file
map <leader>x :tabn<cr>         " Select tab to the right using k"
map <leader>z :tabp<cr>         " Select tab to the left using j"

" nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-s2)
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

" RSpec
nmap <silent> <leader>rl :TestNearest<CR>
nmap <silent> <leader>rs :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

nmap <silent> <leader>rc :VimuxInterruptRunner<CR>
nmap <silent> <leader>ri :VimuxInspectRunner<CR>
nmap <silent> <leader>rz :VimuxZoomRunner<CR>

let g:test#strategy = 'vimux'

" Always run split-window instead of using nearest pane
let VimuxUseNearest = 0

" Use last pane as runner
let g:VimuxUseLast = 1

" alias yw to yank the entire word 'yank inner word'
" even if the cursor is halfway inside the word
nnoremap ,yw yiww
" ,ow = 'overwrite word', replace a word with what's in the yank buffer
nnoremap ,ow "_diwhp

" ,# Surround a word with #{ruby interpolation}
map ,# ysiw#
vmap ,# c#{<C-R>"}<ESC>

" ," Surround a word with "quotes"
map ," ysiw"
vmap ," c"<C-R>""<ESC>

" ,' Surround a word with 'single quotes'
map ,' ysiw'
vmap ,' c'<C-R>"'<ESC>

" ,) or ,( Surround a word with (parens)
" The difference is in whether a space is put in
map ,( ysiw(
map ,) ysiw)
vmap ,( c( <C-R>" )<ESC>
vmap ,) c(<C-R>")<ESC>

" ,[ Surround a word with [brackets]
map ,] ysiw]
map ,[ ysiw[
vmap ,[ c[ <C-R>" ]<ESC>
vmap ,] c[<C-R>"]<ESC>

" ,{ Surround a word with {braces}
map ,} ysiw}
map ,{ ysiw{
vmap ,} c{ <C-R>" }<ESC>
vmap ,{ c{<C-R>"}<ESC>

map ,` ysiw`

" ,q to toggle quickfix window (where you have stuff like Ag)
" ,oq to open it back up (rare)
nmap <silent> ,qc :cclose<CR>
nmap <silent> ,qo :copen<CR>

" Create window splits easier. The default
" way is Ctrl-w,v and Ctrl-w,s. I remap
" this to vv and ss
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

"Clear current search highlight by double tapping //
nmap <silent> // :nohlsearch<CR>

" Ctrl-/ to toggle comments
map <C-w> :TComment<CR>
imap <C-w> <Esc>:TComment<CR>i

" Use Leader- numbers to pick the tab you want
map <silent> <leader>1 :tabn 1<cr>
map <silent> <leader>2 :tabn 2<cr>
map <silent> <leader>3 :tabn 3<cr>
map <silent> <leader>4 :tabn 4<cr>
map <silent> <leader>5 :tabn 5<cr>
map <silent> <leader>6 :tabn 6<cr>
map <silent> <leader>7 :tabn 7<cr>
map <silent> <leader>8 :tabn 8<cr>
map <silent> <leader>9 :tabn 9<cr>

" Turn off default key mappings
let g:multi_cursor_use_default_mapping=0

" Switch to multicursor mode with ,mc
let g:multi_cursor_start_key=',mc'

" Ctrl-n, Ctrl-p, Ctrl-x, and <Esc> are mapped in the special multicursor
" mode once you've added at least one virtual cursor to the buffer
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

imap ^H <Left><Del>

function! s:ChangeSurrounding(movement)
  " define 'surrounding' opening characters that we want to be able to change
  let surrounding_beginnings = ['{', '(', '"', '>', '[', "'", '`']
  let cursor_position = col('.')
  let line = getline('.')
  " nasty hack to omit single appostrophy matching
  if (count(split(line, '\zs'), "'") < 2)
    let l = remove(surrounding_beginnings, index(surrounding_beginnings, "'"))
  endif
  " walk the line backwards looking for the innermost 'surrounding' opening character
  while cursor_position > 0
    let char = line[cursor_position-1]
    let matched_beginning_index = index(surrounding_beginnings, char)
    if matched_beginning_index > -1
      if '>' == char
        " vim already understands HTML and XML tags so use that
        execute "normal! c" . a:movement . "t"
      else
        " change (inside) the 'surrounding' we found
        execute "normal! c" . a:movement . char
      endif
      " move one char right of that opening character
      execute "normal! l"
      " go into insert mode (statinsert! positioned the cursor after the
      " surrounding entirely)
      startinsert
      return
    endif
    let cursor_position -= 1
  endwhile
endfunction

command! ChangeInsideSurrounding :call <sid>ChangeSurrounding("i")
command! ChangeAroundSurrounding :call <sid>ChangeSurrounding("a")

if !hasmapto(':ChangeInsideSurrounding<CR>')
  nmap <script> <silent> <unique> <Leader>ci :ChangeInsideSurrounding<CR>
endif

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

" upper/lower word
nmap <leader>cru mQviwU`Q
nmap <leader>crs mQviwu`Q

nmap <C-\> :NERDTreeFind<CR>
nmap <leader>n :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$']

" Automatically removing all trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

au BufRead,BufNewFile {Vagrantfile,Gemfile,Capfile,*.arb} set ft=ruby

" Delete buffer while keeping window layout (don't close buffer's windows).
" Version 2008-11-18 from http://vim.wikia.com/wiki/VimTip165
if v:version < 700 || exists('loaded_bclose') || &cp
  finish
endif
let loaded_bclose = 1
if !exists('bclose_multiple')
  let bclose_multiple = 1
endif


"-------------------------------------------------------------------------------
" Turn on filetype autocompletion
"-------------------------------------------------------------------------------
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1

" autocmd FileType ruby compiler ruby

" autocmd FileType ruby,text,markdown let b:vcm_tab_complete = 'dict'

" let g:neocomplete#enable_at_startup = 1
let g:deoplete#enable_at_startup = 1

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif
if !exists('g:neocomplete#sources#omni#force_omni_input_patterns')
    let g:neocomplete#sources#omni#force_omni_input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.ruby = '[^.[:digit:] *\t]\%(\.\|->\)'

inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<Down>"
inoremap <expr> <C-o> "\<C-y>"

autocmd FileType make set noexpandtab
autocmd FileType make set nolist

"-------------------------------------------------------------------------------
" Configure fzf
"-------------------------------------------------------------------------------
set wildignore=*.o,*.png,*.jpg,*.zip,*.tar*,*.pyc,*.min.js " ignore these filetypes in menus

let g:fzf_command_prefix = 'Fzf'
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
" - window (nvim only)
let g:fzf_layout = { 'down': '~40%' }

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" Advanced customization using autoload functions
autocmd VimEnter * command! Colors
  \ call fzf#vim#colors({'left': '15%', 'options': '--reverse --margin 30%,0'})

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

nnoremap <silent> ,t :FZF!<CR>
" nnoremap <silent> ,js :FZF spec<CR>

"-------------------------------------------------------------------------------
" Configure NERDTree
"-------------------------------------------------------------------------------
" Auto open nerd tree on startup
let g:nerdtree_tabs_open_on_gui_startup = 0
" Focus in the main content window
let g:nerdtree_tabs_focus_on_files = 1
" Make nerdtree look nice
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30

"-------------------------------------------------------------------------------
" Configure UltiSnips
"-------------------------------------------------------------------------------
" let g:UltiSnipsExpandTrigger='<tab>'
" let g:UltiSnipsJumpForwardTrigger='<tab>'
" let g:UltiSnipsJumpBackwardTrigger='<S-tab>'

" let g:UltiSnipsExpandTrigger="<c-s>"
let g:UltiSnipsJumpForwardTrigger="<c-n>"
let g:UltiSnipsJumpBackwardTrigger="<c-p>"
let g:UltiSnipsListSnippets='<c-l>'


"-------------------------------------------------------------------------------
" Markdown settings
"-------------------------------------------------------------------------------
let g:vim_markdown_folding_disabled = 1

"-------------------------------------------------------------------------------
" Format json easily
"-------------------------------------------------------------------------------
com! FormatJSON %!python -m json.tool

"-------------------------------------------------------------------------------
" Colorscheme
"-------------------------------------------------------------------------------
syntax enable
set background=dark
colorscheme solarized

"-------------------------------------------------------------------------------
" Grepping tool
"-------------------------------------------------------------------------------
set grepprg=ag
"grep the current word using K (mnemonic Kurrent)
nnoremap <silent> K :tab split<CR>:Ag <cword><CR>
",gg = Grep! - using Ag the silver searcher
" Open the Ag command and place the cursor into the quotes
nmap ,ag :Ag ""<Left>
nmap ,af :AgFile ""<Left>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE (thanks Gary Bernhardt)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <Leader>rf :call RenameFile()<cr>

" open spec in vertical split
nmap vs vv <C-l> :A<CR> <C-h>

set ttyfast
set lazyredraw

if v:version >= 703
  " Note: Relative number is quite slow with Ruby, so is cursorline
  autocmd FileType ruby setlocal ts=2 sts=2 sw=2 norelativenumber nocursorline
else
  autocmd FileType ruby setlocal ts=2 sts=2 sw=2
endif

augroup ft_rb
    au!
    " fix the SLOOOW syntax highlighting
    au FileType ruby setlocal re=1 foldmethod=manual
augroup END

" Disable hover tooltips
set noballooneval
let g:netrw_nobeval = 1

" let g:php_folding = 1
" let g:ruby_folding = 1
"let g:airline#extensions#tabline#enabled = 1

" Ruby hash syntax conversion
nnoremap <F12> :%s/:\([^ ]*\)\(\s*\)=>/\1:/g<return>

" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
  if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
  endif
  if deoplete#is_enabled()
    call deoplete#disable()
    let g:deoplete_is_enable_before_multi_cursors = 1
  else
    let g:deoplete_is_enable_before_multi_cursors = 0
  endif
endfunction

" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
  if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
  endif
  if g:deoplete_is_enable_before_multi_cursors
    call deoplete#enable()
  endif
endfunction

" Quickly open a buffer for scribble
map <leader>q :tabedit ~/buffer<cr>

" let g:tmuxline_preset = {
"       \'a'    : '#S',
"       \'c'    : '#(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD) #(cd #{pane_current_path}; git tag | tail -1)',
"       \'win'  : ['#I', '#W'],
"       \'cwin' : ['#I', '#W', '#F'],
"       \'z'    : '#{battery_icon} #{battery_percentage} #{battery_remain}'}

nnoremap <silent> <Leader>+ :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "vertical resize " . (winwidth(0) * 2/3)<CR>
